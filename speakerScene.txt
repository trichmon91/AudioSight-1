//Written by Turner Richmond


global proc speakerScene(string $filename, int $bass, int $mid, int $treble, float $left[], float $right[]) {
    string $audioFile = `sound -file $filename -offset 0`;

    string $audioNodeName = `createNode audioNode`;
    connectAttr time1.outTime ($audioNodeName+".inTime");
    connectAttr ($audioFile+".filename") ($audioNodeName+".filePath");
    connectAttr ($audioFile+".offset") ($audioNodeName+".offset"); 

    int $lowest = 0;
    $mid = $mid + $bass;
    $treble = $treble + $mid;

//create 3 planes
    polyPlane -ch on -o on -w 10 -h 10 -sw 1 -sh 1 -cuv 2 ;
    move -r 0 0 12 ;
    setAttr "polyPlane1.subdivisionsWidth" 50;
    setAttr "polyPlane1.subdivisionsHeight" 50;
    polyPlane -ch on -o on -w 10 -h 10 -sw 1 -sh 1 -cuv 2 ;
    move -r 0 0 0 ;
    setAttr "polyPlane2.subdivisionsWidth" 50;
    setAttr "polyPlane2.subdivisionsHeight" 50;
    polyPlane -ch on -o on -w 10 -h 10 -sw 1 -sh 1 -cuv 2 ;
    move -r 0 0 -12 ;
    setAttr "polyPlane3.subdivisionsWidth" 50;
    setAttr "polyPlane3.subdivisionsHeight" 50;
    select -r pPlane1;

//attach a deformer to each plane
    SoftModTool;
    move -r -os -wd 0 2 0 ;
    SelectTool;
    select -r pPlane2;
    SoftModTool;
    move -r -os -wd 0 2 0 ;
    SelectTool;
    select -r pPlane3;
    SoftModTool;
    move -r -os -wd 0 2 0 ;
    SelectTool;
    select -r pPlane1 ;

//allow for plane to be collided with
    rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;
    select -r pPlane2 ;
    rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;
    select -r pPlane3 ;
    rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;

//create gravity
    gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 ;
    connectDynamic -f gravityField1  pPlane1;
    connectDynamic -f gravityField1  pPlane2;
    connectDynamic -f gravityField1  pPlane3;

//create emitters
    emitter -pos 0 5 12 -type omni -r 100 -sro 0 -nuv 0 -cye none -cyi 1 -spd 1 -srn 0 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0 ;
    particle;
    emitter -pos 0 5 0 -type omni -r 100 -sro 0 -nuv 0 -cye none -cyi 1 -spd 1 -srn 0 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0 ;
    particle;
    emitter -pos 0 5 -12 -type omni -r 100 -sro 0 -nuv 0 -cye none -cyi 1 -spd 1 -srn 0 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0 ;
    particle;
    connectDynamic -em emitter1 particle1;
    connectDynamic -f gravityField1 particle1; ;
    connectDynamic -em emitter2 particle2;
    connectDynamic -f gravityField1 particle2; ;
    connectDynamic -em emitter3 particle3;
    connectDynamic -f gravityField1 particle3; ;

//allow for particles to collide with planes
    collision -r 1 -f 0 -o 0.01  pPlane1;
    collision -r 1 -f 0 -o 0.01  pPlane2;
    collision -r 1 -f 0 -o 0.01  pPlane3;
    connectDynamic -c pPlane1  particle1;
    connectDynamic -c pPlane1  particle2;
    connectDynamic -c pPlane1  particle3;
    connectDynamic -c pPlane2  particle1;
    connectDynamic -c pPlane2  particle2;
    connectDynamic -c pPlane2  particle3;
    connectDynamic -c pPlane3  particle1;
    connectDynamic -c pPlane3  particle2;
    connectDynamic -c pPlane3  particle3;

//set attributes of particles
    setAttr "particleShape1.lifespanMode" 1;
    setAttr "particleShape1.lifespan" 3;
    setAttr "particleShape2.lifespanMode" 1;
    setAttr "particleShape2.lifespan" 3;
    setAttr "particleShape3.lifespanMode" 1;
    setAttr "particleShape3.lifespan" 3;
    setAttr "emitter1.rate" 10;
    setAttr "emitter2.rate" 10;
    setAttr "emitter3.rate" 10;
    addAttr -ln "rgbPP" -dt vectorArray particleShape1;
    addAttr -ln "rgbPP0" -dt vectorArray particleShape1;
    addAttr -ln "rgbPP" -dt vectorArray particleShape2;
    addAttr -ln "rgbPP0" -dt vectorArray particleShape2;
    addAttr -ln "rgbPP" -dt vectorArray particleShape3;
    addAttr -ln "rgbPP0" -dt vectorArray particleShape3;

//note the inheritColor is commented out for MAC because there is an inherent error within Maya.  Set to 1 so that particles may start colored
//    setAttr "emitter1.inheritColor" 1;
//    setAttr "emitter2.inheritColor" 1;
//    setAttr "emitter3.inheritColor" 1;
    setAttr "rigidBody1.bounciness" 0.05;
    setAttr "rigidBody2.bounciness" 0.05;
    setAttr "rigidBody3.bounciness" 0.05;

//emit spheres
    setAttr "particleShape1.particleRenderType" 4;
    setAttr "particleShape2.particleRenderType" 4;
    setAttr "particleShape3.particleRenderType" 4;

//allows the deformer to create a speaker effect with the planes
	expression -string ("softMod1Handle.translateY = rmsBand(\""+$audioNodeName+"\","+$lowest+","+$bass+")*"+0.25);
	expression -string ("softMod2Handle.translateY = rmsBand(\""+$audioNodeName+"\","+$bass+","+$mid+")*"+0.25);
	expression -string ("softMod3Handle.translateY = rmsBand(\""+$audioNodeName+"\","+$mid+","+$treble+")*"+0.25);

//changes colors of the emitted spheres
	expression -string ("emitter1.particleColorR = expression1.output[0]*"+$left[0]);
	expression -string ("emitter1.particleColorB = expression1.output[0]*"+$left[1]);
	expression -string ("emitter1.particleColorG = expression1.output[0]*"+$left[2]);
	
	float $middle[] = {($left[0]+$right[0])/2, ($left[1]+$right[1])/2, ($left[2]+$right[2])/2};
	
	expression -string ("emitter2.particleColorR = expression2.output[0]*"+$middle[0]);
	expression -string ("emitter2.particleColorB = expression2.output[0]*"+$middle[1]);
	expression -string ("emitter2.particleColorG = expression2.output[0]*"+$middle[2]);
	
	expression -string ("emitter3.particleColorR = expression3.output[0]*"+$right[0]);
	expression -string ("emitter3.particleColorB = expression3.output[0]*"+$right[1]);
	expression -string ("emitter3.particleColorG = expression3.output[0]*"+$right[2]);
};